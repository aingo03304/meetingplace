{"version":3,"sources":["index.tsx","reportWebVitals.ts","SceneComponent.jsx"],"names":["box","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","SceneComponent","antialias","engineOptions","adaptToDeviceRatio","sceneOptions","onRender","onSceneReady","rest","Object","objectWithoutProperties","reactCanvas","useRef","_React$useState","React","useState","height","window","innerHeight","width","innerWidth","_React$useState2","slicedToArray","dimensions","setDimensions","useEffect","canvas","current","engine","Engine","scene","Scene","isReady","onReadyObservable","addOnce","runRenderLoop","render","resize","getEngine","addEventListener","dispose","removeEventListener","react_default","a","createElement","assign","ref","ReactDOM","createRoot","document","getElementById","id","undefined","deltaTimeInMillis","getDeltaTime","rotation","y","Math","PI","camera","FreeCamera","Vector3","setTarget","Zero","getRenderingCanvas","attachControl","HemisphericLight","intensity","MeshBuilder","CreateBox","size","position","CreateGround"],"mappings":"6JAWIA,4CCGWC,SAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,uBCLCY,EAAA,SAAAN,GAOE,IANbO,EAMaP,EANbO,UACAC,EAKaR,EALbQ,cACAC,EAIaT,EAJbS,mBACAC,EAGaV,EAHbU,aACAC,EAEaX,EAFbW,SACAC,EACaZ,EADbY,aACGC,EAAUC,OAAAC,EAAA,EAAAD,CAAAd,EAAA,6FACPgB,EAAcC,iBAAO,MADdC,EAEuBC,IAAMC,SAAS,CAC/CC,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,aAJLC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAI,EAAA,GAENU,EAFMF,EAAA,GAEMG,EAFNH,EAAA,GA6Cb,OAvCAI,oBAAU,WAAM,IACKC,EAAWf,EAApBgB,QAER,GAAKD,EAAL,CAEA,IAAME,EAAS,IAAIC,IAAOH,EAAQxB,EAAWC,EAAeC,GACtD0B,EAAQ,IAAIC,IAAMH,EAAQvB,GAC5ByB,EAAME,UACNzB,EAAauB,GAEbA,EAAMG,kBAAkBC,QAAQ,SAACJ,GAAD,OAAWvB,EAAauB,KAG5DF,EAAOO,cAAc,WACO,oBAAb7B,GAAyBA,EAASwB,GAC7CA,EAAMM,WAGV,IAAMC,EAAS,WACXP,EAAMQ,YAAYD,SAClBb,EAAc,CACVR,OAAQC,OAAOC,YACfC,MAAOF,OAAOG,cAQtB,OAJIH,QACAA,OAAOsB,iBAAiB,SAAUF,GAG/B,WACHP,EAAMQ,UAAUE,UAEZvB,QACAA,OAAOwB,oBAAoB,SAAUJ,MAG9C,CAACnC,EAAWC,EAAeC,EAAoBC,EAAcC,EAAUC,IAEnEmC,EAAAC,EAAAC,cAAA,SAAAnC,OAAAoC,OAAA,CAAQ1B,MAAOI,EAAWJ,MAAOH,OAAQO,EAAWP,OAAQ8B,IAAKnC,GAAiBH,KFjDhFuC,IAASC,WACpBC,SAASC,eAAe,SA4BrBd,OACHM,EAAAC,EAAAC,cAAC3C,EAAD,CACMkD,GAAG,kBACHjD,WAAS,EACTE,oBAAkB,EAClBE,SAbS,SAACwB,GACd,QAAYsB,IAARjE,EAAmB,CACnB,IAAIkE,EAAoBvB,EAAMQ,YAAYgB,eAE1CnE,EAAIoE,SAASC,GADD,GACa,GAAMC,KAAKC,GAAK,GAAKL,EAAoB,OAUlE9C,aA7Ba,SAACuB,GAClB,IAAI6B,EAAS,IAAIC,IAAW,UAAW,IAAIC,IAAQ,EAAG,GAAI,IAAK/B,GAC/D6B,EAAOG,UAAUD,IAAQE,QACzB,IAAMrC,EAASI,EAAMQ,YAAY0B,qBACjCL,EAAOM,cAAcvC,GAAQ,GAEjB,IAAIwC,IAAiB,QAAS,IAAIL,IAAQ,EAAG,EAAG,GAAI/B,GAC1DqC,UAAY,IAElBhF,EAAMiF,IAAYC,UAAU,MAAO,CAAEC,KAAM,GAAKxC,IAC5CyC,SAASf,EAAI,EAEjBY,IAAYI,aAAa,SAAU,CAAErD,MAAO,EAAGH,OAAQ,GAAKc,IAkBxD3B,mBAAeiD,EACf/C,kBAAc+C,KAMtBhE","file":"static/js/main.ff834086.chunk.js","sourcesContent":["import React from 'react';\nimport { FreeCamera, Vector3, HemisphericLight, MeshBuilder, Scene, Mesh } from '@babylonjs/core';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport SceneComponent from './SceneComponent';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nlet box: Mesh | undefined;\n\nconst onSceneReady = (scene: Scene) => {\n    var camera = new FreeCamera(\"camera1\", new Vector3(0, 5, -10), scene);\n    camera.setTarget(Vector3.Zero());\n    const canvas = scene.getEngine().getRenderingCanvas();\n    camera.attachControl(canvas, true);\n\n    var light = new HemisphericLight(\"light\", new Vector3(0, 1, 0), scene);\n    light.intensity = 0.7;\n\n    box = MeshBuilder.CreateBox(\"box\", { size: 2 }, scene);\n    box.position.y = 1;\n\n    MeshBuilder.CreateGround(\"ground\", { width: 6, height: 6 }, scene);\n};\n\nconst onRender = (scene: Scene) => {\n    if (box !== undefined) {\n        var deltaTimeInMillis = scene.getEngine().getDeltaTime();\n        const rpm = 10;\n        box.rotation.y += (rpm / 60) * Math.PI * 2 * (deltaTimeInMillis / 1000);\n    }\n};\n\nroot.render(\n  <SceneComponent \n        id=\"scene-component\"\n        antialias\n        adaptToDeviceRatio\n        onRender={onRender}\n        onSceneReady={onSceneReady} \n        engineOptions={undefined} \n        sceneOptions={undefined} />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { useEffect, useRef } from \"react\";\nimport { Engine, Scene } from \"@babylonjs/core\";\n\nexport default ({ \n    antialias, \n    engineOptions, \n    adaptToDeviceRatio, \n    sceneOptions, \n    onRender, \n    onSceneReady, \n    ...rest}) => {\n    const reactCanvas = useRef(null);\n    const [dimensions, setDimensions] = React.useState({\n        height: window.innerHeight,\n        width: window.innerWidth\n    });\n    useEffect(() => {\n        const { current: canvas } = reactCanvas;\n\n        if (!canvas) return;\n\n        const engine = new Engine(canvas, antialias, engineOptions, adaptToDeviceRatio);\n        const scene = new Scene(engine, sceneOptions);\n        if (scene.isReady()) {\n            onSceneReady(scene);\n        } else {\n            scene.onReadyObservable.addOnce((scene) => onSceneReady(scene));\n        }\n\n        engine.runRenderLoop(() => {\n            if (typeof onRender === \"function\") onRender(scene);\n            scene.render();\n        });\n\n        const resize = () => {\n            scene.getEngine().resize();\n            setDimensions({\n                height: window.innerHeight,\n                width: window.innerWidth\n            })\n        };\n\n        if (window) {\n            window.addEventListener(\"resize\", resize);\n        }\n\n        return () => {\n            scene.getEngine.dispose();\n\n            if (window) {\n                window.removeEventListener(\"resize\", resize);\n            }\n        };\n    }, [antialias, engineOptions, adaptToDeviceRatio, sceneOptions, onRender, onSceneReady]);\n\n    return <canvas width={dimensions.width} height={dimensions.height} ref={reactCanvas} {...rest} />;\n};"],"sourceRoot":""}